// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  groupMembers  GroupMember[]
  expenses      Expense[]
  paidExpenses  ExpenseSplit[] @relation("PaidBy")
  owedExpenses  ExpenseSplit[] @relation("OwedBy")
  settlementsFrom Settlement[] @relation("SettlementFrom")
  settlementsTo   Settlement[] @relation("SettlementTo")

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members     GroupMember[]
  expenses    Expense[]
  settlements Settlement[]

  @@index([createdAt])
}

model GroupMember {
  id        String   @id @default(cuid())
  groupId   String
  userId    String
  role      String   @default("member") // "admin" or "member"
  joinedAt  DateTime @default(now())

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@index([groupId])
  @@index([userId])
}

model Expense {
  id          String   @id @default(cuid())
  description String
  amount      Float
  currency    String   @default("USD")
  date        DateTime @default(now())
  category    String?
  notes       String?
  groupId     String
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  group       Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdBy   User           @relation(fields: [createdById], references: [id])
  splits      ExpenseSplit[]

  @@index([groupId])
  @@index([createdById])
  @@index([date])
}

model ExpenseSplit {
  id         String  @id @default(cuid())
  expenseId  String
  paidById   String
  owedById   String
  amount     Float
  settled    Boolean @default(false)

  expense Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  paidBy  User    @relation("PaidBy", fields: [paidById], references: [id])
  owedBy  User    @relation("OwedBy", fields: [owedById], references: [id])

  @@index([expenseId])
  @@index([paidById])
  @@index([owedById])
  @@index([settled])
}

model Settlement {
  id        String   @id @default(cuid())
  groupId   String
  fromId    String
  toId      String
  amount    Float
  currency  String   @default("USD")
  notes     String?
  settledAt DateTime @default(now())

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  from  User  @relation("SettlementFrom", fields: [fromId], references: [id])
  to    User  @relation("SettlementTo", fields: [toId], references: [id])

  @@index([groupId])
  @@index([fromId])
  @@index([toId])
  @@index([settledAt])
}
